// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id       Int    @id @default(autoincrement())
  name     String
  email    String  @unique
  password String

  bets bets[]

  user_roles users_roles1[]
  user_permissions users_permissions1[]
}

model countries {
  id       Int    @id @default(autoincrement())
  name     String @unique
  level    Int
  sigla   String

  matchesTimeOne matches[] @relation("TimeOne")
  matchesTimeTwo matches[] @relation("TimeTwo")
  matchesTimeWinner matches[] @relation("TimeWinner")
  
}

model groups {
  id     Int @id @default(autoincrement())
  name  String @unique
  number Int @unique

  matches matches[]

  
}

model matches {
  id    Int @id @default(autoincrement())
  roundId Int 
  day   String
  groupId Int
  timeOneId Int 
  timeTwoId Int
  gameScoreTimeOne Int?
  gameScoreTimeTwo Int?
  winningTime Int?
  stadiumId Int

  dateAndHora DateTime @db.Timestamp()

  bets bets[]

  groups groups @relation(fields: [groupId], references: [id])
  Time1 countries @relation("TimeOne",fields: [timeOneId], references: [id])
  Time2 countries @relation("TimeTwo",fields: [timeTwoId], references: [id])
  TimeWinner countries? @relation("TimeWinner",fields: [winningTime], references: [id])
  rounds rounds @relation(fields: [roundId], references: [id])
  Stadium stadium @relation(fields: [stadiumId], references: [id])
  
}

model rounds{
  id    Int @id @default(autoincrement())
  name String
  number Int

  matches matches[]
}

model bets{
  id Int @id @default(autoincrement())
  userId Int
  matcheId Int
  winningTime Int?
  gameScoreTimeOne Int
  gameScoreTimeTwo Int
  createAt DateTime @default(now())
  correct Boolean? 

  matches matches @relation(fields: [matcheId], references: [id])
  users users @relation(fields: [userId], references: [id])

}


model permissions{
  id Int @id @default(autoincrement())
  name String @unique
  description String @unique
  created_at DateTime @default(now())

  permissions_roles permissions_roles1[]

  user_permissions users_permissions1[]
} 

model roles{
  id Int @id @default(autoincrement())
  name String @unique
  description String @unique
  created_at DateTime @default(now())

  permissions_roles permissions_roles1[]

  user_roles users_roles1[]
}


model permissions_roles1 {
  id Int @id @default(autoincrement())
  permissions     permissions   @relation(fields: [permissionsId], references: [id])
  permissionsId   Int 
  roles           roles  @relation(fields: [rolesId], references: [id])
  rolesId Int 


}



model users_roles1 {
  id Int @id @default(autoincrement())
  users      users   @relation(fields: [userId], references: [id])
  userId     Int 
  roles      roles  @relation(fields: [rolesId], references: [id])
  rolesId    Int 
  
}


model users_permissions1 {
  id Int @id @default(autoincrement())
  permissions     permissions   @relation(fields: [permissionsId], references: [id])
  permissionsId   Int 
  users           users  @relation(fields: [userId], references: [id])
  userId Int 
  

}

model stadium{
  id Int @id @default(autoincrement())
  name String

  matches matches[]
}